{"ast":null,"code":"var _excluded = [\"tags\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { Url } from './url';\nimport { PAGE_LOAD, PAGE_EXIT, NAVIGATION } from './constants';\nimport { getServerTimingInfo, PERF, isPerfTimelineSupported } from './utils';\nvar LEFT_SQUARE_BRACKET = 91;\nvar RIGHT_SQUARE_BRACKET = 93;\nvar EXTERNAL = 'external';\nvar RESOURCE = 'resource';\nvar HARD_NAVIGATION = 'hard-navigation';\nfunction getPortNumber(port, protocol) {\n  if (port === '') {\n    port = protocol === 'http:' ? '80' : protocol === 'https:' ? '443' : '';\n  }\n  return port;\n}\nfunction getResponseContext(perfTimingEntry) {\n  var transferSize = perfTimingEntry.transferSize,\n    encodedBodySize = perfTimingEntry.encodedBodySize,\n    decodedBodySize = perfTimingEntry.decodedBodySize,\n    serverTiming = perfTimingEntry.serverTiming;\n  var respContext = {\n    transfer_size: transferSize,\n    encoded_body_size: encodedBodySize,\n    decoded_body_size: decodedBodySize\n  };\n  var serverTimingStr = getServerTimingInfo(serverTiming);\n  if (serverTimingStr) {\n    respContext.headers = {\n      'server-timing': serverTimingStr\n    };\n  }\n  return respContext;\n}\nfunction getDestination(parsedUrl) {\n  var port = parsedUrl.port,\n    protocol = parsedUrl.protocol,\n    hostname = parsedUrl.hostname;\n  var portNumber = getPortNumber(port, protocol);\n  var ipv6Hostname = hostname.charCodeAt(0) === LEFT_SQUARE_BRACKET && hostname.charCodeAt(hostname.length - 1) === RIGHT_SQUARE_BRACKET;\n  var address = hostname;\n  if (ipv6Hostname) {\n    address = hostname.slice(1, -1);\n  }\n  return {\n    service: {\n      resource: hostname + ':' + portNumber,\n      name: '',\n      type: ''\n    },\n    address: address,\n    port: Number(portNumber)\n  };\n}\nfunction getResourceContext(data) {\n  var entry = data.entry,\n    url = data.url;\n  var parsedUrl = new Url(url);\n  var destination = getDestination(parsedUrl);\n  return {\n    http: {\n      url: url,\n      response: getResponseContext(entry)\n    },\n    destination: destination\n  };\n}\nfunction getExternalContext(data) {\n  var url = data.url,\n    method = data.method,\n    target = data.target,\n    response = data.response;\n  var parsedUrl = new Url(url);\n  var destination = getDestination(parsedUrl);\n  var context = {\n    http: {\n      method: method,\n      url: parsedUrl.href\n    },\n    destination: destination\n  };\n  var statusCode;\n  if (target && typeof target.status !== 'undefined') {\n    statusCode = target.status;\n  } else if (response) {\n    statusCode = response.status;\n  }\n  context.http.status_code = statusCode;\n  return context;\n}\nfunction getNavigationContext(data) {\n  var url = data.url;\n  var parsedUrl = new Url(url);\n  var destination = getDestination(parsedUrl);\n  return {\n    destination: destination\n  };\n}\nexport function getPageContext() {\n  return {\n    page: {\n      referer: document.referrer,\n      url: location.href\n    }\n  };\n}\nexport function addSpanContext(span, data) {\n  if (!data) {\n    return;\n  }\n  var type = span.type;\n  var context;\n  switch (type) {\n    case EXTERNAL:\n      context = getExternalContext(data);\n      break;\n    case RESOURCE:\n      context = getResourceContext(data);\n      break;\n    case HARD_NAVIGATION:\n      context = getNavigationContext(data);\n      break;\n  }\n  span.addContext(context);\n}\nexport function addTransactionContext(transaction, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    tags = _ref.tags,\n    configContext = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var pageContext = getPageContext();\n  var responseContext = {};\n  if (transaction.type === PAGE_EXIT) {\n    transaction.ensureContext();\n    if (transaction.context.page && transaction.context.page.url) {\n      pageContext.page.url = transaction.context.page.url;\n    }\n  } else if (transaction.type === PAGE_LOAD && isPerfTimelineSupported()) {\n    var entries = PERF.getEntriesByType(NAVIGATION);\n    if (entries && entries.length > 0) {\n      responseContext = {\n        response: getResponseContext(entries[0])\n      };\n    }\n  }\n  transaction.addContext(pageContext, responseContext, configContext);\n}","map":null,"metadata":{},"sourceType":"module"}