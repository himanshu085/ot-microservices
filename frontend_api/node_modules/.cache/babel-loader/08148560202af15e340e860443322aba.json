{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { getWithTransaction } from './get-with-transaction';\nfunction getTransactionName(name, props) {\n  var _props$match = props.match,\n    match = _props$match === void 0 ? {} : _props$match;\n  if (Array.isArray(name) && match.path) {\n    return match.path;\n  }\n  return name;\n}\nfunction getApmRoute(apm) {\n  var withTransaction = getWithTransaction(apm);\n  return function (_React$Component) {\n    _inheritsLoose(ApmRoute, _React$Component);\n    function ApmRoute(props) {\n      var _this;\n      _this = _React$Component.call(this, props) || this;\n      _this.state = {};\n      return _this;\n    }\n    ApmRoute.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      var initial = prevState.apmComponent == null;\n      var path = nextProps.path,\n        component = nextProps.component;\n      var pathChanged = path != prevState.path;\n      if (initial || pathChanged) {\n        return {\n          path: path,\n          apmComponent: withTransaction(path, 'route-change', function (transaction, props) {\n            if (transaction) {\n              var name = getTransactionName(path, props);\n              name && (transaction.name = name);\n            }\n          })(component)\n        };\n      }\n      return null;\n    };\n    var _proto = ApmRoute.prototype;\n    _proto.render = function render() {\n      return React.createElement(Route, _extends({}, this.props, {\n        component: this.state.apmComponent\n      }));\n    };\n    return ApmRoute;\n  }(React.Component);\n}\nexport { getApmRoute };","map":null,"metadata":{},"sourceType":"module"}