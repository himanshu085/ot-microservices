{"ast":null,"code":"import { generateRandomId, setLabel, merge, getDuration, getTime } from '../common/utils';\nimport { NAME_UNKNOWN, TYPE_CUSTOM } from '../common/constants';\nvar SpanBase = function () {\n  function SpanBase(name, type, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!name) {\n      name = NAME_UNKNOWN;\n    }\n    if (!type) {\n      type = TYPE_CUSTOM;\n    }\n    this.name = name;\n    this.type = type;\n    this.options = options;\n    this.id = options.id || generateRandomId(16);\n    this.traceId = options.traceId;\n    this.sampled = options.sampled;\n    this.sampleRate = options.sampleRate;\n    this.timestamp = options.timestamp;\n    this._start = getTime(options.startTime);\n    this._end = undefined;\n    this.ended = false;\n    this.outcome = undefined;\n    this.onEnd = options.onEnd;\n  }\n  var _proto = SpanBase.prototype;\n  _proto.ensureContext = function ensureContext() {\n    if (!this.context) {\n      this.context = {};\n    }\n  };\n  _proto.addLabels = function addLabels(tags) {\n    this.ensureContext();\n    var ctx = this.context;\n    if (!ctx.tags) {\n      ctx.tags = {};\n    }\n    var keys = Object.keys(tags);\n    keys.forEach(function (k) {\n      return setLabel(k, tags[k], ctx.tags);\n    });\n  };\n  _proto.addContext = function addContext() {\n    for (var _len = arguments.length, context = new Array(_len), _key = 0; _key < _len; _key++) {\n      context[_key] = arguments[_key];\n    }\n    if (context.length === 0) return;\n    this.ensureContext();\n    this.context = merge.apply(void 0, [this.context].concat(context));\n  };\n  _proto.end = function end(endTime) {\n    if (this.ended) {\n      return;\n    }\n    this.ended = true;\n    this._end = getTime(endTime);\n    this.callOnEnd();\n  };\n  _proto.callOnEnd = function callOnEnd() {\n    if (typeof this.onEnd === 'function') {\n      this.onEnd(this);\n    }\n  };\n  _proto.duration = function duration() {\n    return getDuration(this._start, this._end);\n  };\n  return SpanBase;\n}();\nexport default SpanBase;","map":null,"metadata":{},"sourceType":"module"}