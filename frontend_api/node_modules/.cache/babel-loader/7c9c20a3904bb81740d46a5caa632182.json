{"ast":null,"code":"var _excluded = [\"tags\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { createStackTraces, filterInvalidFrames } from './stack-trace';\nimport { generateRandomId, merge, extend, setLabel } from '../common/utils';\nimport { getPageContext } from '../common/context';\nimport { truncateModel, ERROR_MODEL } from '../common/truncate';\nimport stackParser from 'error-stack-parser';\nvar IGNORE_KEYS = ['stack', 'message'];\nvar PROMISE_REJECTION_PREFIX = 'Unhandled promise rejection: ';\nfunction getErrorProperties(error) {\n  var propertyFound = false;\n  var properties = {};\n  Object.keys(error).forEach(function (key) {\n    if (IGNORE_KEYS.indexOf(key) >= 0) {\n      return;\n    }\n    var val = error[key];\n    if (val == null || typeof val === 'function') {\n      return;\n    }\n    if (typeof val === 'object') {\n      if (typeof val.toISOString !== 'function') return;\n      val = val.toISOString();\n    }\n    properties[key] = val;\n    propertyFound = true;\n  });\n  if (propertyFound) {\n    return properties;\n  }\n}\nvar ErrorLogging = function () {\n  function ErrorLogging(apmServer, configService, transactionService) {\n    this._apmServer = apmServer;\n    this._configService = configService;\n    this._transactionService = transactionService;\n  }\n  var _proto = ErrorLogging.prototype;\n  _proto.createErrorDataModel = function createErrorDataModel(errorEvent, opts) {\n    var frames = createStackTraces(stackParser, errorEvent);\n    var filteredFrames = filterInvalidFrames(frames);\n    var culprit = '(inline script)';\n    var lastFrame = filteredFrames[filteredFrames.length - 1];\n    if (lastFrame && lastFrame.filename) {\n      culprit = lastFrame.filename;\n    }\n    var message = errorEvent.message,\n      error = errorEvent.error;\n    var errorMessage = message;\n    var errorType = '';\n    var errorContext = {};\n    if (error && typeof error === 'object') {\n      errorMessage = errorMessage || error.message;\n      errorType = error.name;\n      var customProperties = getErrorProperties(error);\n      if (customProperties) {\n        errorContext.custom = customProperties;\n      }\n    }\n    if (opts && opts.labels) {\n      var keys = Object.keys(opts.labels);\n      errorContext.tags = {};\n      keys.forEach(function (k) {\n        return setLabel(k, opts.labels[k], errorContext.tags);\n      });\n    }\n    if (!errorType) {\n      if (errorMessage && errorMessage.indexOf(':') > -1) {\n        errorType = errorMessage.split(':')[0];\n      }\n    }\n    var currentTransaction = this._transactionService.getCurrentTransaction();\n    var transactionContext = currentTransaction ? currentTransaction.context : {};\n    var _this$_configService$ = this._configService.get('context'),\n      tags = _this$_configService$.tags,\n      configContext = _objectWithoutPropertiesLoose(_this$_configService$, _excluded);\n    var pageContext = getPageContext();\n    var context = merge({}, pageContext, transactionContext, configContext, errorContext);\n    var errorObject = {\n      id: generateRandomId(),\n      culprit: culprit,\n      exception: {\n        message: errorMessage,\n        stacktrace: filteredFrames,\n        type: errorType\n      },\n      context: context\n    };\n    if (currentTransaction) {\n      errorObject = extend(errorObject, {\n        trace_id: currentTransaction.traceId,\n        parent_id: currentTransaction.id,\n        transaction_id: currentTransaction.id,\n        transaction: {\n          type: currentTransaction.type,\n          sampled: currentTransaction.sampled\n        }\n      });\n    }\n    return truncateModel(ERROR_MODEL, errorObject);\n  };\n  _proto.logErrorEvent = function logErrorEvent(errorEvent, opts) {\n    if (typeof errorEvent === 'undefined') {\n      return;\n    }\n    var errorObject = this.createErrorDataModel(errorEvent, opts);\n    if (typeof errorObject.exception.message === 'undefined') {\n      return;\n    }\n    this._apmServer.addError(errorObject);\n  };\n  _proto.registerListeners = function registerListeners() {\n    var _this = this;\n    window.addEventListener('error', function (errorEvent) {\n      return _this.logErrorEvent(errorEvent);\n    });\n    window.addEventListener('unhandledrejection', function (promiseRejectionEvent) {\n      return _this.logPromiseEvent(promiseRejectionEvent);\n    });\n  };\n  _proto.logPromiseEvent = function logPromiseEvent(promiseRejectionEvent) {\n    var reason = promiseRejectionEvent.reason;\n    if (reason == null) {\n      reason = '<no reason specified>';\n    }\n    var errorEvent;\n    if (typeof reason.message === 'string') {\n      var name = reason.name ? reason.name + ': ' : '';\n      errorEvent = {\n        error: reason,\n        message: PROMISE_REJECTION_PREFIX + name + reason.message\n      };\n    } else {\n      errorEvent = this._parseRejectReason(reason);\n    }\n    this.logErrorEvent(errorEvent);\n  };\n  _proto.logError = function logError(messageOrError, opts) {\n    var errorEvent = {};\n    if (typeof messageOrError === 'string') {\n      errorEvent.message = messageOrError;\n    } else {\n      errorEvent.error = messageOrError;\n    }\n    return this.logErrorEvent(errorEvent, opts);\n  };\n  _proto._parseRejectReason = function _parseRejectReason(reason) {\n    var errorEvent = {\n      message: PROMISE_REJECTION_PREFIX\n    };\n    if (Array.isArray(reason)) {\n      errorEvent.message += '<object>';\n    } else if (typeof reason === 'object') {\n      try {\n        errorEvent.message += JSON.stringify(reason);\n        errorEvent.error = reason;\n      } catch (error) {\n        errorEvent.message += '<object>';\n      }\n    } else if (typeof reason === 'function') {\n      errorEvent.message += '<function>';\n    } else {\n      errorEvent.message += reason;\n    }\n    return errorEvent;\n  };\n  return ErrorLogging;\n}();\nexport default ErrorLogging;","map":null,"metadata":{},"sourceType":"module"}