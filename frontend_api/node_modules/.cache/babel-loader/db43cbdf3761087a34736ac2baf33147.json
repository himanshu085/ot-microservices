{"ast":null,"code":"import Queue from './queue';\nimport throttle from './throttle';\nimport NDJSON from './ndjson';\nimport { truncateModel, METADATA_MODEL } from './truncate';\nimport { ERRORS, HTTP_REQUEST_TIMEOUT, QUEUE_FLUSH, TRANSACTIONS } from './constants';\nimport { noop } from './utils';\nimport { Promise } from './polyfills';\nimport { compressMetadata, compressTransaction, compressError, compressPayload } from './compress';\nimport { __DEV__ } from '../state';\nimport { sendFetchRequest, shouldUseFetchWithKeepAlive } from './http/fetch';\nimport { sendXHR } from './http/xhr';\nvar THROTTLE_INTERVAL = 60000;\nvar ApmServer = function () {\n  function ApmServer(configService, loggingService) {\n    this._configService = configService;\n    this._loggingService = loggingService;\n    this.queue = undefined;\n    this.throttleEvents = noop;\n  }\n  var _proto = ApmServer.prototype;\n  _proto.init = function init() {\n    var _this = this;\n    var queueLimit = this._configService.get('queueLimit');\n    var flushInterval = this._configService.get('flushInterval');\n    var limit = this._configService.get('eventsLimit');\n    var onFlush = function onFlush(events) {\n      var promise = _this.sendEvents(events);\n      if (promise) {\n        promise.catch(function (reason) {\n          _this._loggingService.warn('Failed sending events!', _this._constructError(reason));\n        });\n      }\n    };\n    this.queue = new Queue(onFlush, {\n      queueLimit: queueLimit,\n      flushInterval: flushInterval\n    });\n    this.throttleEvents = throttle(this.queue.add.bind(this.queue), function () {\n      return _this._loggingService.warn('Dropped events due to throttling!');\n    }, {\n      limit: limit,\n      interval: THROTTLE_INTERVAL\n    });\n    this._configService.observeEvent(QUEUE_FLUSH, function () {\n      _this.queue.flush();\n    });\n  };\n  _proto._postJson = function _postJson(endPoint, payload) {\n    var _this2 = this;\n    var headers = {\n      'Content-Type': 'application/x-ndjson'\n    };\n    var apmRequest = this._configService.get('apmRequest');\n    var params = {\n      payload: payload,\n      headers: headers,\n      beforeSend: apmRequest\n    };\n    return compressPayload(params).catch(function (error) {\n      if (__DEV__) {\n        _this2._loggingService.debug('Compressing the payload using CompressionStream API failed', error.message);\n      }\n      return params;\n    }).then(function (result) {\n      return _this2._makeHttpRequest('POST', endPoint, result);\n    }).then(function (_ref) {\n      var responseText = _ref.responseText;\n      return responseText;\n    });\n  };\n  _proto._constructError = function _constructError(reason) {\n    var url = reason.url,\n      status = reason.status,\n      responseText = reason.responseText;\n    if (typeof status == 'undefined') {\n      return reason;\n    }\n    var message = url + ' HTTP status: ' + status;\n    if (__DEV__ && responseText) {\n      try {\n        var serverErrors = [];\n        var response = JSON.parse(responseText);\n        if (response.errors && response.errors.length > 0) {\n          response.errors.forEach(function (err) {\n            return serverErrors.push(err.message);\n          });\n          message += ' ' + serverErrors.join(',');\n        }\n      } catch (e) {\n        this._loggingService.debug('Error parsing response from APM server', e);\n      }\n    }\n    return new Error(message);\n  };\n  _proto._makeHttpRequest = function _makeHttpRequest(method, url, _temp) {\n    var _ref2 = _temp === void 0 ? {} : _temp,\n      _ref2$timeout = _ref2.timeout,\n      timeout = _ref2$timeout === void 0 ? HTTP_REQUEST_TIMEOUT : _ref2$timeout,\n      payload = _ref2.payload,\n      headers = _ref2.headers,\n      beforeSend = _ref2.beforeSend;\n    var sendCredentials = this._configService.get('sendCredentials');\n    if (!beforeSend && shouldUseFetchWithKeepAlive(method, payload)) {\n      return sendFetchRequest(method, url, {\n        keepalive: true,\n        timeout: timeout,\n        payload: payload,\n        headers: headers,\n        sendCredentials: sendCredentials\n      }).catch(function (reason) {\n        if (reason instanceof TypeError) {\n          return sendXHR(method, url, {\n            timeout: timeout,\n            payload: payload,\n            headers: headers,\n            beforeSend: beforeSend,\n            sendCredentials: sendCredentials\n          });\n        }\n        throw reason;\n      });\n    }\n    return sendXHR(method, url, {\n      timeout: timeout,\n      payload: payload,\n      headers: headers,\n      beforeSend: beforeSend,\n      sendCredentials: sendCredentials\n    });\n  };\n  _proto.fetchConfig = function fetchConfig(serviceName, environment) {\n    var _this3 = this;\n    var _this$getEndpoints = this.getEndpoints(),\n      configEndpoint = _this$getEndpoints.configEndpoint;\n    if (!serviceName) {\n      return Promise.reject('serviceName is required for fetching central config.');\n    }\n    configEndpoint += \"?service.name=\" + serviceName;\n    if (environment) {\n      configEndpoint += \"&service.environment=\" + environment;\n    }\n    var localConfig = this._configService.getLocalConfig();\n    if (localConfig) {\n      configEndpoint += \"&ifnonematch=\" + localConfig.etag;\n    }\n    var apmRequest = this._configService.get('apmRequest');\n    return this._makeHttpRequest('GET', configEndpoint, {\n      timeout: 5000,\n      beforeSend: apmRequest\n    }).then(function (xhr) {\n      var status = xhr.status,\n        responseText = xhr.responseText;\n      if (status === 304) {\n        return localConfig;\n      } else {\n        var remoteConfig = JSON.parse(responseText);\n        var etag = xhr.getResponseHeader('etag');\n        if (etag) {\n          remoteConfig.etag = etag.replace(/[\"]/g, '');\n          _this3._configService.setLocalConfig(remoteConfig, true);\n        }\n        return remoteConfig;\n      }\n    }).catch(function (reason) {\n      var error = _this3._constructError(reason);\n      return Promise.reject(error);\n    });\n  };\n  _proto.createMetaData = function createMetaData() {\n    var cfg = this._configService;\n    var metadata = {\n      service: {\n        name: cfg.get('serviceName'),\n        version: cfg.get('serviceVersion'),\n        agent: {\n          name: 'rum-js',\n          version: cfg.version\n        },\n        language: {\n          name: 'javascript'\n        },\n        environment: cfg.get('environment')\n      },\n      labels: cfg.get('context.tags')\n    };\n    return truncateModel(METADATA_MODEL, metadata);\n  };\n  _proto.addError = function addError(error) {\n    var _this$throttleEvents;\n    this.throttleEvents((_this$throttleEvents = {}, _this$throttleEvents[ERRORS] = error, _this$throttleEvents));\n  };\n  _proto.addTransaction = function addTransaction(transaction) {\n    var _this$throttleEvents2;\n    this.throttleEvents((_this$throttleEvents2 = {}, _this$throttleEvents2[TRANSACTIONS] = transaction, _this$throttleEvents2));\n  };\n  _proto.ndjsonErrors = function ndjsonErrors(errors, compress) {\n    var key = compress ? 'e' : 'error';\n    return errors.map(function (error) {\n      var _NDJSON$stringify;\n      return NDJSON.stringify((_NDJSON$stringify = {}, _NDJSON$stringify[key] = compress ? compressError(error) : error, _NDJSON$stringify));\n    });\n  };\n  _proto.ndjsonMetricsets = function ndjsonMetricsets(metricsets) {\n    return metricsets.map(function (metricset) {\n      return NDJSON.stringify({\n        metricset: metricset\n      });\n    }).join('');\n  };\n  _proto.ndjsonTransactions = function ndjsonTransactions(transactions, compress) {\n    var _this4 = this;\n    var key = compress ? 'x' : 'transaction';\n    return transactions.map(function (tr) {\n      var _NDJSON$stringify2;\n      var spans = '',\n        breakdowns = '';\n      if (!compress) {\n        if (tr.spans) {\n          spans = tr.spans.map(function (span) {\n            return NDJSON.stringify({\n              span: span\n            });\n          }).join('');\n          delete tr.spans;\n        }\n        if (tr.breakdown) {\n          breakdowns = _this4.ndjsonMetricsets(tr.breakdown);\n          delete tr.breakdown;\n        }\n      }\n      return NDJSON.stringify((_NDJSON$stringify2 = {}, _NDJSON$stringify2[key] = compress ? compressTransaction(tr) : tr, _NDJSON$stringify2)) + spans + breakdowns;\n    });\n  };\n  _proto.sendEvents = function sendEvents(events) {\n    var _payload, _NDJSON$stringify3;\n    if (events.length === 0) {\n      return;\n    }\n    var transactions = [];\n    var errors = [];\n    for (var i = 0; i < events.length; i++) {\n      var event = events[i];\n      if (event[TRANSACTIONS]) {\n        transactions.push(event[TRANSACTIONS]);\n      }\n      if (event[ERRORS]) {\n        errors.push(event[ERRORS]);\n      }\n    }\n    if (transactions.length === 0 && errors.length === 0) {\n      return;\n    }\n    var cfg = this._configService;\n    var payload = (_payload = {}, _payload[TRANSACTIONS] = transactions, _payload[ERRORS] = errors, _payload);\n    var filteredPayload = cfg.applyFilters(payload);\n    if (!filteredPayload) {\n      this._loggingService.warn('Dropped payload due to filtering!');\n      return;\n    }\n    var apiVersion = cfg.get('apiVersion');\n    var compress = apiVersion > 2;\n    var ndjson = [];\n    var metadata = this.createMetaData();\n    var metadataKey = compress ? 'm' : 'metadata';\n    ndjson.push(NDJSON.stringify((_NDJSON$stringify3 = {}, _NDJSON$stringify3[metadataKey] = compress ? compressMetadata(metadata) : metadata, _NDJSON$stringify3)));\n    ndjson = ndjson.concat(this.ndjsonErrors(filteredPayload[ERRORS], compress), this.ndjsonTransactions(filteredPayload[TRANSACTIONS], compress));\n    var ndjsonPayload = ndjson.join('');\n    var _this$getEndpoints2 = this.getEndpoints(),\n      intakeEndpoint = _this$getEndpoints2.intakeEndpoint;\n    return this._postJson(intakeEndpoint, ndjsonPayload);\n  };\n  _proto.getEndpoints = function getEndpoints() {\n    var serverUrl = this._configService.get('serverUrl');\n    var apiVersion = this._configService.get('apiVersion');\n    var serverUrlPrefix = this._configService.get('serverUrlPrefix') || \"/intake/v\" + apiVersion + \"/rum/events\";\n    var intakeEndpoint = serverUrl + serverUrlPrefix;\n    var configEndpoint = serverUrl + \"/config/v1/rum/agents\";\n    return {\n      intakeEndpoint: intakeEndpoint,\n      configEndpoint: configEndpoint\n    };\n  };\n  return ApmServer;\n}();\nexport default ApmServer;","map":null,"metadata":{},"sourceType":"module"}