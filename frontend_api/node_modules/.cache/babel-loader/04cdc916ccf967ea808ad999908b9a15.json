{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport Span from './span';\nimport SpanBase from './span-base';\nimport { generateRandomId, merge, now, getTime, extend, removeInvalidChars } from '../common/utils';\nimport { REUSABILITY_THRESHOLD, TRUNCATED_TYPE } from '../common/constants';\nimport { captureBreakdown as _captureBreakdown } from './breakdown';\nvar Transaction = function (_SpanBase) {\n  _inheritsLoose(Transaction, _SpanBase);\n  function Transaction(name, type, options) {\n    var _this;\n    _this = _SpanBase.call(this, name, type, options) || this;\n    _this.traceId = generateRandomId();\n    _this.marks = undefined;\n    _this.spans = [];\n    _this._activeSpans = {};\n    _this._activeTasks = new Set();\n    _this.blocked = false;\n    _this.captureTimings = false;\n    _this.breakdownTimings = [];\n    _this.sampleRate = _this.options.transactionSampleRate;\n    _this.sampled = Math.random() <= _this.sampleRate;\n    return _this;\n  }\n  var _proto = Transaction.prototype;\n  _proto.addMarks = function addMarks(obj) {\n    this.marks = merge(this.marks || {}, obj);\n  };\n  _proto.mark = function mark(key) {\n    var skey = removeInvalidChars(key);\n    var markTime = now() - this._start;\n    var custom = {};\n    custom[skey] = markTime;\n    this.addMarks({\n      custom: custom\n    });\n  };\n  _proto.canReuse = function canReuse() {\n    var threshold = this.options.reuseThreshold || REUSABILITY_THRESHOLD;\n    return !!this.options.canReuse && !this.ended && now() - this._start < threshold;\n  };\n  _proto.redefine = function redefine(name, type, options) {\n    if (name) {\n      this.name = name;\n    }\n    if (type) {\n      this.type = type;\n    }\n    if (options) {\n      this.options.reuseThreshold = options.reuseThreshold;\n      this.options = extend(this.options, options);\n    }\n  };\n  _proto.startSpan = function startSpan(name, type, options) {\n    var _this2 = this;\n    if (this.ended) {\n      return;\n    }\n    var opts = extend({}, options);\n    opts.onEnd = function (trc) {\n      _this2._onSpanEnd(trc);\n    };\n    opts.traceId = this.traceId;\n    opts.sampled = this.sampled;\n    opts.sampleRate = this.sampleRate;\n    if (!opts.parentId) {\n      opts.parentId = this.id;\n    }\n    var span = new Span(name, type, opts);\n    this._activeSpans[span.id] = span;\n    if (opts.blocking) {\n      this.addTask(span.id);\n    }\n    return span;\n  };\n  _proto.isFinished = function isFinished() {\n    return !this.blocked && this._activeTasks.size === 0;\n  };\n  _proto.detectFinish = function detectFinish() {\n    if (this.isFinished()) this.end();\n  };\n  _proto.end = function end(endTime) {\n    if (this.ended) {\n      return;\n    }\n    this.ended = true;\n    this._end = getTime(endTime);\n    for (var sid in this._activeSpans) {\n      var span = this._activeSpans[sid];\n      span.type = span.type + TRUNCATED_TYPE;\n      span.end(endTime);\n    }\n    this.callOnEnd();\n  };\n  _proto.captureBreakdown = function captureBreakdown() {\n    this.breakdownTimings = _captureBreakdown(this);\n  };\n  _proto.block = function block(flag) {\n    this.blocked = flag;\n    if (!this.blocked) {\n      this.detectFinish();\n    }\n  };\n  _proto.addTask = function addTask(taskId) {\n    if (!taskId) {\n      taskId = 'task-' + generateRandomId(16);\n    }\n    this._activeTasks.add(taskId);\n    return taskId;\n  };\n  _proto.removeTask = function removeTask(taskId) {\n    var deleted = this._activeTasks.delete(taskId);\n    deleted && this.detectFinish();\n  };\n  _proto.resetFields = function resetFields() {\n    this.spans = [];\n    this.sampleRate = 0;\n  };\n  _proto._onSpanEnd = function _onSpanEnd(span) {\n    this.spans.push(span);\n    delete this._activeSpans[span.id];\n    this.removeTask(span.id);\n  };\n  _proto.isManaged = function isManaged() {\n    return !!this.options.managed;\n  };\n  return Transaction;\n}(SpanBase);\nexport default Transaction;","map":null,"metadata":{},"sourceType":"module"}