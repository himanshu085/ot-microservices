{"ast":null,"code":"import { QUEUE_ADD_TRANSACTION, QUEUE_FLUSH, TRANSACTION_IGNORE } from '../constants';\nimport { state } from '../../state';\nimport { now } from '../utils';\nimport { reportInp } from '../../performance-monitoring/metrics/inp/report';\nexport function observePageVisibility(configService, transactionService) {\n  if (document.visibilityState === 'hidden') {\n    state.lastHiddenStart = 0;\n  }\n  var visibilityChangeHandler = function visibilityChangeHandler() {\n    if (document.visibilityState === 'hidden') {\n      onPageHidden(configService, transactionService);\n    }\n  };\n  var pageHideHandler = function pageHideHandler() {\n    return onPageHidden(configService, transactionService);\n  };\n  var useCapture = true;\n  window.addEventListener('visibilitychange', visibilityChangeHandler, useCapture);\n  window.addEventListener('pagehide', pageHideHandler, useCapture);\n  return function () {\n    window.removeEventListener('visibilitychange', visibilityChangeHandler, useCapture);\n    window.removeEventListener('pagehide', pageHideHandler, useCapture);\n  };\n}\nfunction onPageHidden(configService, transactionService) {\n  var inpTr = reportInp(transactionService);\n  if (inpTr) {\n    var unobserve = configService.observeEvent(QUEUE_ADD_TRANSACTION, function () {\n      endManagedTransaction(configService, transactionService);\n      unobserve();\n    });\n  } else {\n    endManagedTransaction(configService, transactionService);\n  }\n}\nfunction endManagedTransaction(configService, transactionService) {\n  var tr = transactionService.getCurrentTransaction();\n  if (tr) {\n    var unobserveDiscard = configService.observeEvent(TRANSACTION_IGNORE, function () {\n      state.lastHiddenStart = now();\n      unobserveDiscard();\n      unobserveQueueAdd();\n    });\n    var unobserveQueueAdd = configService.observeEvent(QUEUE_ADD_TRANSACTION, function () {\n      configService.dispatchEvent(QUEUE_FLUSH);\n      state.lastHiddenStart = now();\n      unobserveQueueAdd();\n      unobserveDiscard();\n    });\n    tr.end();\n  } else {\n    configService.dispatchEvent(QUEUE_FLUSH);\n    state.lastHiddenStart = now();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}