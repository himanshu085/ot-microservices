{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport { Span as otSpan } from 'opentracing/lib/span';\nimport { extend, getTimeOrigin } from '../common/utils';\nimport Transaction from '../performance-monitoring/transaction';\nvar Span = function (_otSpan) {\n  _inheritsLoose(Span, _otSpan);\n  function Span(tracer, span) {\n    var _this;\n    _this = _otSpan.call(this) || this;\n    _this.__tracer = tracer;\n    _this.span = span;\n    _this.isTransaction = span instanceof Transaction;\n    _this.spanContext = {\n      id: span.id,\n      traceId: span.traceId,\n      sampled: span.sampled\n    };\n    return _this;\n  }\n  var _proto = Span.prototype;\n  _proto._context = function _context() {\n    return this.spanContext;\n  };\n  _proto._tracer = function _tracer() {\n    return this.__tracer;\n  };\n  _proto._setOperationName = function _setOperationName(name) {\n    this.span.name = name;\n  };\n  _proto._addTags = function _addTags(keyValuePairs) {\n    var tags = extend({}, keyValuePairs);\n    if (tags.type) {\n      this.span.type = tags.type;\n      delete tags.type;\n    }\n    if (this.isTransaction) {\n      var userId = tags['user.id'];\n      var username = tags['user.username'];\n      var email = tags['user.email'];\n      if (userId || username || email) {\n        this.span.addContext({\n          user: {\n            id: userId,\n            username: username,\n            email: email\n          }\n        });\n        delete tags['user.id'];\n        delete tags['user.username'];\n        delete tags['user.email'];\n      }\n    }\n    this.span.addLabels(tags);\n  };\n  _proto._log = function _log(log, timestamp) {\n    if (log.event === 'error') {\n      if (log['error.object']) {\n        this.__tracer.errorLogging.logError(log['error.object']);\n      } else if (log.message) {\n        this.__tracer.errorLogging.logError(log.message);\n      }\n    }\n  };\n  _proto._finish = function _finish(finishTime) {\n    this.span.end();\n    if (finishTime) {\n      this.span._end = finishTime - getTimeOrigin();\n    }\n  };\n  return Span;\n}(otSpan);\nexport default Span;","map":null,"metadata":{},"sourceType":"module"}