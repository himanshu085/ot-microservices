{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport { afterFrame, LOGGING_SERVICE } from '@elastic/apm-rum-core';\nfunction isReactClassComponent(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\nfunction getWithTransaction(apm) {\n  return function withTransaction(name, type, callback) {\n    if (callback === void 0) {\n      callback = function callback() {};\n    }\n    return function (Component) {\n      if (!apm.isActive()) {\n        return Component;\n      }\n      if (!Component) {\n        var loggingService = apm.serviceFactory.getService(LOGGING_SERVICE);\n        loggingService.warn(name + \" is not instrumented since component property is not provided\");\n        return Component;\n      }\n      var ApmComponent = null;\n      if (!isReactClassComponent(Component) && typeof React.useEffect === 'function' && typeof React.useState === 'function') {\n        ApmComponent = function ApmComponent(props) {\n          var _React$useState = React.useState(function () {\n              var tr = apm.startTransaction(name, type, {\n                managed: true,\n                canReuse: true\n              });\n              callback(tr, props);\n              return tr;\n            }),\n            _React$useState2 = _slicedToArray(_React$useState, 1),\n            transaction = _React$useState2[0];\n          React.useEffect(function () {\n            afterFrame(function () {\n              return transaction && transaction.detectFinish();\n            });\n            return function () {\n              transaction && transaction.detectFinish();\n            };\n          }, []);\n          return React.createElement(Component, _extends({\n            transaction: transaction\n          }, props));\n        };\n      } else {\n        ApmComponent = function (_React$Component) {\n          _inheritsLoose(ApmComponent, _React$Component);\n          function ApmComponent(props) {\n            var _this;\n            _this = _React$Component.call(this, props) || this;\n            _this.transaction = apm.startTransaction(name, type, {\n              managed: true,\n              canReuse: true\n            });\n            callback(_this.transaction, props);\n            return _this;\n          }\n          var _proto = ApmComponent.prototype;\n          _proto.componentDidMount = function componentDidMount() {\n            var _this2 = this;\n            afterFrame(function () {\n              return _this2.transaction && _this2.transaction.detectFinish();\n            });\n          };\n          _proto.componentWillUnmount = function componentWillUnmount() {\n            if (this.transaction) {\n              this.transaction.detectFinish();\n            }\n          };\n          _proto.render = function render() {\n            return React.createElement(Component, _extends({\n              transaction: this.transaction\n            }, this.props));\n          };\n          return ApmComponent;\n        }(React.Component);\n      }\n      ApmComponent.displayName = \"withTransaction(\" + (Component.displayName || Component.name) + \")\";\n      ApmComponent.WrappedComponent = Component;\n      return hoistStatics(ApmComponent, Component);\n    };\n  };\n}\nexport { getWithTransaction };","map":null,"metadata":{},"sourceType":"module"}