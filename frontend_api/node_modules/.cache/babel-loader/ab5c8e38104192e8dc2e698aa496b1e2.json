{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport { Tracer as otTracer } from 'opentracing/lib/tracer';\nimport { REFERENCE_CHILD_OF, FORMAT_TEXT_MAP, FORMAT_HTTP_HEADERS, FORMAT_BINARY } from 'opentracing/lib/constants';\nimport { Span as NoopSpan } from 'opentracing/lib/span';\nimport { getTimeOrigin, find } from '../common/utils';\nimport { __DEV__ } from '../state';\nimport Span from './span';\nvar Tracer = function (_otTracer) {\n  _inheritsLoose(Tracer, _otTracer);\n  function Tracer(performanceMonitoring, transactionService, loggingService, errorLogging) {\n    var _this;\n    _this = _otTracer.call(this) || this;\n    _this.performanceMonitoring = performanceMonitoring;\n    _this.transactionService = transactionService;\n    _this.loggingService = loggingService;\n    _this.errorLogging = errorLogging;\n    return _this;\n  }\n  var _proto = Tracer.prototype;\n  _proto._startSpan = function _startSpan(name, options) {\n    var spanOptions = {\n      managed: true\n    };\n    if (options) {\n      spanOptions.timestamp = options.startTime;\n      if (options.childOf) {\n        spanOptions.parentId = options.childOf.id;\n      } else if (options.references && options.references.length > 0) {\n        if (options.references.length > 1) {\n          if (__DEV__) {\n            this.loggingService.debug('Elastic APM OpenTracing: Unsupported number of references, only the first childOf reference will be recorded.');\n          }\n        }\n        var childRef = find(options.references, function (ref) {\n          return ref.type() === REFERENCE_CHILD_OF;\n        });\n        if (childRef) {\n          spanOptions.parentId = childRef.referencedContext().id;\n        }\n      }\n    }\n    var span;\n    var currentTransaction = this.transactionService.getCurrentTransaction();\n    if (currentTransaction) {\n      span = this.transactionService.startSpan(name, undefined, spanOptions);\n    } else {\n      span = this.transactionService.startTransaction(name, undefined, spanOptions);\n    }\n    if (!span) {\n      return new NoopSpan();\n    }\n    if (spanOptions.timestamp) {\n      span._start = spanOptions.timestamp - getTimeOrigin();\n    }\n    var otSpan = new Span(this, span);\n    if (options && options.tags) {\n      otSpan.addTags(options.tags);\n    }\n    return otSpan;\n  };\n  _proto._inject = function _inject(spanContext, format, carrier) {\n    switch (format) {\n      case FORMAT_TEXT_MAP:\n      case FORMAT_HTTP_HEADERS:\n        this.performanceMonitoring.injectDtHeader(spanContext, carrier);\n        break;\n      case FORMAT_BINARY:\n        if (__DEV__) {\n          this.loggingService.debug('Elastic APM OpenTracing: binary carrier format is not supported.');\n        }\n        break;\n    }\n  };\n  _proto._extract = function _extract(format, carrier) {\n    var ctx;\n    switch (format) {\n      case FORMAT_TEXT_MAP:\n      case FORMAT_HTTP_HEADERS:\n        ctx = this.performanceMonitoring.extractDtHeader(carrier);\n        break;\n      case FORMAT_BINARY:\n        if (__DEV__) {\n          this.loggingService.debug('Elastic APM OpenTracing: binary carrier format is not supported.');\n        }\n        break;\n    }\n    if (!ctx) {\n      ctx = null;\n    }\n    return ctx;\n  };\n  return Tracer;\n}(otTracer);\nexport default Tracer;","map":null,"metadata":{},"sourceType":"module"}