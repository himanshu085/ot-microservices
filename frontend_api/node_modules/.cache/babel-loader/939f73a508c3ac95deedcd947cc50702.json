{"ast":null,"code":"import { noop } from './utils';\nvar LoggingService = function () {\n  function LoggingService(spec) {\n    if (spec === void 0) {\n      spec = {};\n    }\n    this.levels = ['trace', 'debug', 'info', 'warn', 'error'];\n    this.level = spec.level || 'warn';\n    this.prefix = spec.prefix || '';\n    this.resetLogMethods();\n  }\n  var _proto = LoggingService.prototype;\n  _proto.shouldLog = function shouldLog(level) {\n    return this.levels.indexOf(level) >= this.levels.indexOf(this.level);\n  };\n  _proto.setLevel = function setLevel(level) {\n    if (level === this.level) {\n      return;\n    }\n    this.level = level;\n    this.resetLogMethods();\n  };\n  _proto.resetLogMethods = function resetLogMethods() {\n    var _this = this;\n    this.levels.forEach(function (level) {\n      _this[level] = _this.shouldLog(level) ? log : noop;\n      function log() {\n        var normalizedLevel = level;\n        if (level === 'trace' || level === 'debug') {\n          normalizedLevel = 'info';\n        }\n        var args = arguments;\n        args[0] = this.prefix + args[0];\n        if (console) {\n          var realMethod = console[normalizedLevel] || console.log;\n          if (typeof realMethod === 'function') {\n            realMethod.apply(console, args);\n          }\n        }\n      }\n    });\n  };\n  return LoggingService;\n}();\nexport default LoggingService;","map":null,"metadata":{},"sourceType":"module"}